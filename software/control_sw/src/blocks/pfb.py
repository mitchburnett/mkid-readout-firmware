import numpy as np

from .block import Block
from cosmic_f.error_levels import *

class Pfb(Block):
    #DEFAULT_SHIFT = 0b0011011011111
    STAGES = 10
    def __init__(self, host, name, nchan=2**10, nchan_parallel=8, logger=None):
        """
        :param host: CasperFpga interface for host.
        :type host: casperfpga.CasperFpga

        :param name: Name of block in Simulink hierarchy.
        :type name: str

        :param logger: Logger instance to which log messages should be emitted.
        :type logger: logging.Logger

        :param nchan: Number of channels generated by the FFT, before any
            downselection.
        :type nchan: int

        :param nchan_parallel: Number of channels out of the PFB on each FPGA clock cycle.
        :tyoe nchan_parallel: int
        """
        super(Pfb, self).__init__(host, name, logger)
        self.nchan = nchan
        self.nchan_parallel = nchan_parallel

    #def set_fft_shift(self, shift):
    #    """
    #    Set the FFT shift schedule.

    #    :param shift: Shift schedule to be applied.
    #    :type shift: int
    #    """
    #    self.write_int('fft_shift', shift)

    def get_fft_shift(self):
        """
        Get the currently applied FFT shift schedule. The returned value
        takes into account any hardcoding of the shift settings by firmware.

        :return: Shift schedule
        :rtype: int
        """
        return 2**10 - 1 #self.read_uint('fft_shift')

    def get_overflow_count(self):
        """
        Get the total number of FFT overflow events, since the last
        statistics reset.

        :return: Number of overflows
        :rtype: int
        """
        return self.read_uint('of_count')

    def get_status(self):
        """
        Get status and error flag dictionaries.

        Status keys:

            - overflow_count (int) : Number of FFT overflow events since last
              statistics reset. Any non-zero value is flagged with "WARNING".

            - fft_shift (str) : Currently loaded FFT shift schedule, formatted
              as a binary string, prefixed with "0b".

        :return: (status_dict, flags_dict) tuple. `status_dict` is a dictionary of
            status key-value pairs. flags_dict is
            a dictionary with all, or a sub-set, of the keys in `status_dict`. The values
            held in this dictionary are as defined in `error_levels.py` and indicate
            that values in the status dictionary are outside normal ranges.

        """

        stats = {}
        flags = {}
        stats['overflow_count'] = self.get_overflow_count()
        if stats['overflow_count'] != 0:
            flags['overflow_count'] = FENG_WARNING
        fft_shift = self.get_fft_shift()
        # stats['fft_shift'] = '0b%s' % np.binary_repr(fft_shift, width=self.STAGES)
        return stats, flags

    def sel_band(self, start_chan=0):
        """
        Select which half of the band is output.

        :param start_chan: First channel to be output. Half the spectrum will be output,
            starting with this channel.
        :type start_chan: int
        """
        assert start_chan % self.nchan_parallel == 0, "start_chan mult be a multiple of %d" % self.nchan_parallel
        # Full set of channels
        chans = np.arange(self.nchan, dtype=int)
        # Shift so that the first channel we want is first
        chans = np.roll(chans, -start_chan)
        # Turn into word indices which take into account parallel samples
        chans = chans[::self.nchan_parallel] // self.nchan_parallel
        # interleave channels we don't want with those we do
        reorder_map = chans.reshape(2,-1).transpose().reshape(-1)
        map_str = np.array(reorder_map, dtype='>I').tobytes()
        for reg in self.listdev():
            if reg.endswith('map1'):
                self.write(reg, map_str)
        
    def initialize(self, read_only=False):
        """
        :param read_only: If False, enable the PFB FIR, set the
            FFT shift to the default value, and
            reset the overflow count. If True, do nothing.
        :type read_only: bool
        """
        if read_only:
            return
        self.sel_band(0)
        #self.set_fft_shift(self.DEFAULT_SHIFT)
